{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","name","email","id","className","src","alt","CardList","robots","map","user","index","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filterRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.da01ae36.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n\tconst { name, email, id } = props;\n\treturn (\n\t    <div className=\"bg-light-blue tc dib br3 pa3 ma2 grow bw2 shadow-5\">\n\t    \t<img src={`https://robohash.org/${id}?200x200`} alt='robo'/>\n\t      \t<div>\n\t      \t\t<h2>{name}</h2>\n\t      \t\t<p>{email}</p>\n\t      \t</div>\n\t    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from '../components/Card';\n\nconst CardList = (props) => {\n\tconst { robots } = props;\n\treturn (\n\t    <div className='tc'>\n\t    \t{\n\t\t    robots.map((user, index) => {\n\t\t\treturn ( \n\t\t\t\t<Card \n\t\t\t\t\tkey={index} \n\t\t\t\t\tid={robots[index].id} \n\t\t\t\t\tname={robots[index].name} \n\t\t\t\t\temail={robots[index].email}\n\t\t\t\t/>\n\t\t\t\t);\n\t\t\t})\n\t\t}\n\t    </div>\n  );\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n\treturn (\n\t    <div className='pa2'>\n\t    \t<input \n\t    \t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t    \t\ttype=\"search\" \n\t    \t\tplaceholder=\"Search Robots\" \n\t    \t\tonChange ={searchChange}\n\t    \t/>\n\t    </div>\n  );\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t    <div className='tc' style={{overflowY: 'scroll', border: '1px solid #000', height: '800px'}}>\n\t    \t{props.children}\n\t    </div>\n  );\n}\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n\tconstructor(){\n\t    super();\n\t    this.state = {\n\t    \thasError:false\n\t    }\n  \t}\n\n  \tcomponentDidCatch(error, info){\n  \t\tthis.setState( {hasError: true })\n  \t}\n\n  \trender(){\n  \t\tif(this.state.hasError){\n  \t\t\treturn <h1>Opps !!</h1>\n  \t\t} else {\n  \t\t\treturn this.props.children;\n  \t\t}\n  \t}\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n  componentDidMount(){\n    this.props.onRequestRobots();  \n  }\n\n  render(){\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filterRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    \n    return isPending ?\n        <h1>Loading</h1> : \n      (\n        <div className=\"App tc\">\n          <h1 className=\"f1\">RoboFriends</h1>\n          <SearchBox searchChange={onSearchChange}/>\n          <Scroll>\n            <ErrorBoundary>\n              <CardList robots={filterRobots}/>\n            </ErrorBoundary>  \n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { \n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED \n} from './constants';\n\n\nexport const setSearchField = (text) => ({\n\ttype: CHANGE_SEARCH_FIELD,\n\tpayload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n\tdispatch({ type:REQUEST_ROBOTS_PENDING });\n\tfetch('https://jsonplaceholder.typicode.com/users')\n    \t.then(response => response.json())\n    \t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload:data}))\n    \t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED \n} from './constants';\n\nconst initialStateSearch = {\n\tsearchField:''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n\tswitch(action.type){\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn Object.assign({}, state, {searchField: action.payload})\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nconst initialStateRobots = {\n\tisPending: false,\n\trobots: [],\n\terror:''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n\tswitch(action.type){\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t\treturn Object.assign({}, state, {isPending: true})\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t\treturn Object.assign({}, state, {robots: action.payload, isPending: false})\n\t\tcase REQUEST_ROBOTS_FAILED:\n\t\t\treturn Object.assign({}, state, {error: action.payload, isPending: false})\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}